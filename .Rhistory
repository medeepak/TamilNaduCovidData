raw_data <- readLines("https://api.covid19india.org/v3/data.json")
state_data <- lapply(fromJSON(raw_data), function(X){
c(X$total$confirmed, X$total$deceased, X$total$recovered)
}
)
state_data <- do.call(rbind, state_data)
state_data <- as.data.frame(state_data)
state_data <- tibble::rownames_to_column(state_data, "State")
names(state_data) <- c("State","Confirmed","Deceased","Recovered")
state_data$Recovered <- as.integer(state_data$Recovered)
state_data$Confirmed <- as.integer(state_data$Confirmed)
state_data$Deceased <- as.integer(state_data$Deceased)
state_data <- state_data %>%
mutate(Closed.Cases=Deceased+Recovered)
state_data <- state_data %>%
mutate(Fatality.Share=Deceased*100/Closed.Cases)
#Remove unassigned
state_data <- state_data[state_data$State!="UN", ]
#Remove states with less than 3000 closed cases
state_data <- state_data[state_data$Closed.Cases > 3000, ]
state_data$State <- lapply(state_data$State, function(X){ ifelse(X=="TT", "India", X) })
state_data$Fill.Color <- ifelse(state_data$State=="India", "gold", "red")
state_data <- state_data %>%
arrange(Fatality.Share)
ggplot(state_data,
aes(x=fct_inorder(State),
y=Fatality.Share,
fill=Fill.Color)) +
geom_col(position = "dodge") +
ggtitle("Share of Deaths in Closed cases (with more than 3000 closed cases)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#BFD5E3"),
plot.background = element_rect(fill = "darkgray")) +
xlab("State") +
ylab("Percentage")
ggsave("Share_of_fatalities_in_closed_cases.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
max_deaths <- max(as.integer(state_data$Deceased))
ggplot(state_data, aes(x=as.integer(Deceased), y=round(Fatality.Share,2))) +
geom_point() +
geom_label_repel(aes(label=state_data$State)) +
ylab("Fatality Rates in Closed Cases") +
xlab("Death count") +
xlim(0,as.integer(max_deaths)) +
ggtitle("Fatality Rates in Closed Cases - State wise") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggsave("Share_of_fatalities_in_closed_cases_scatter.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
str(state_data)
state_data$State <- lapply(state_data$State, function(X){ ifelse(X=="TT", "India", X) })
state_data$Fill.Color <- ifelse(state_data$State=="India", "gold", "red")
state_data$State <- as.factor(state_data$State)
state_data <- state_data %>%
arrange(Fatality.Share)
state_data$State <- lapply(state_data$State, function(X){ ifelse(X=="TT", "India", X) })
state_data$Fill.Color <- ifelse(state_data$State=="India", "gold", "red")
state_data$State <- as.list(state_data$State)
state_data <- state_data %>%
arrange(Fatality.Share)
ggplot(state_data,
aes(x=fct_inorder(State),
y=Fatality.Share,
fill=Fill.Color)) +
geom_col(position = "dodge") +
ggtitle("Share of Deaths in Closed cases (with more than 3000 closed cases)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#BFD5E3"),
plot.background = element_rect(fill = "darkgray")) +
xlab("State") +
ylab("Percentage")
str(state_data)
state_data$State <- unlist(lapply(state_data$State, function(X){ ifelse(X=="TT", "India", X) }))
str(state_data)
raw_data <- readLines("https://api.covid19india.org/v3/data.json")
state_data <- lapply(fromJSON(raw_data), function(X){
c(X$total$confirmed, X$total$deceased, X$total$recovered)
}
)
state_data <- do.call(rbind, state_data)
state_data <- as.data.frame(state_data)
state_data <- tibble::rownames_to_column(state_data, "State")
names(state_data) <- c("State","Confirmed","Deceased","Recovered")
state_data$Recovered <- as.integer(state_data$Recovered)
state_data$Confirmed <- as.integer(state_data$Confirmed)
state_data$Deceased <- as.integer(state_data$Deceased)
state_data <- state_data %>%
mutate(Closed.Cases=Deceased+Recovered)
state_data <- state_data %>%
mutate(Fatality.Share=Deceased*100/Closed.Cases)
#Remove unassigned
state_data <- state_data[state_data$State!="UN", ]
#Remove states with less than 3000 closed cases
state_data <- state_data[state_data$Closed.Cases > 3000, ]
state_data$State <- unlist(lapply(state_data$State, function(X){ ifelse(X=="TT", "India", X) }))
state_data$Fill.Color <- ifelse(state_data$State=="India", "gold", "red")
state_data$State <- as.list(state_data$State)
state_data <- state_data %>%
arrange(Fatality.Share)
ggplot(state_data,
aes(x=fct_inorder(State),
y=Fatality.Share,
fill=Fill.Color)) +
geom_col(position = "dodge") +
ggtitle("Share of Deaths in Closed cases (with more than 3000 closed cases)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#BFD5E3"),
plot.background = element_rect(fill = "darkgray")) +
xlab("State") +
ylab("Percentage")
ggsave("Share_of_fatalities_in_closed_cases.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
max_deaths <- max(as.integer(state_data$Deceased))
str(state_data)
raw_data <- readLines("https://api.covid19india.org/v3/data.json")
state_data <- lapply(fromJSON(raw_data), function(X){
c(X$total$confirmed, X$total$deceased, X$total$recovered)
}
)
state_data <- do.call(rbind, state_data)
state_data <- as.data.frame(state_data)
state_data <- tibble::rownames_to_column(state_data, "State")
names(state_data) <- c("State","Confirmed","Deceased","Recovered")
state_data$Recovered <- as.integer(state_data$Recovered)
state_data$Confirmed <- as.integer(state_data$Confirmed)
state_data$Deceased <- as.integer(state_data$Deceased)
state_data <- state_data %>%
mutate(Closed.Cases=Deceased+Recovered)
state_data <- state_data %>%
mutate(Fatality.Share=Deceased*100/Closed.Cases)
#Remove unassigned
state_data <- state_data[state_data$State!="UN", ]
#Remove states with less than 3000 closed cases
state_data <- state_data[state_data$Closed.Cases > 3000, ]
state_data$State <- unlist(lapply(state_data$State, function(X){ ifelse(X=="TT", "India", X) }))
state_data$Fill.Color <- ifelse(state_data$State=="India", "gold", "red")
state_data <- state_data %>%
arrange(Fatality.Share)
ggplot(state_data,
aes(x=fct_inorder(State),
y=Fatality.Share,
fill=Fill.Color)) +
geom_col(position = "dodge") +
ggtitle("Share of Deaths in Closed cases (with more than 3000 closed cases)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5)) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "#BFD5E3"),
plot.background = element_rect(fill = "darkgray")) +
xlab("State") +
ylab("Percentage")
ggsave("Share_of_fatalities_in_closed_cases.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
ggplot(state_data, aes(x=as.integer(Deceased), y=round(Fatality.Share,2))) +
geom_point() +
geom_label_repel(aes(label=state_data$State)) +
ylab("Fatality Rates in Closed Cases") +
xlab("Death count") +
xlim(0,as.integer(max_deaths)) +
ggtitle("Fatality Rates in Closed Cases - State wise") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggsave("Share_of_fatalities_in_closed_cases_scatter.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
source('~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/confirmed_cases_worldwide.R')
source('~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/confirmed_cases_worldwide.R')
source('~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/confirmed_cases_worldwide.R')
View(countries_to_plot)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(forcats)
library(gganimate)
library(ggrepel)
library(zoo)
library(ggimage)
raw_data <- readLines("https://api.covid19india.org/raw_data1.json")
data <- as.data.frame(fromJSON(raw_data))
raw_data <- readLines("https://api.covid19india.org/raw_data2.json")
data <- rbind(data,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data3.json")
data2 <- as.data.frame(fromJSON(raw_data))
raw_data <- readLines("https://api.covid19india.org/raw_data4.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data5.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data6.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data7.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data8.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data9.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
state_wise_data <- data %>% group_by(raw_data.detectedstate, raw_data.dateannounced) %>% subset(raw_data.detectedstate !="") %>% summarise(count=n())
state_wise_data_2 <- data2 %>% group_by(raw_data.detectedstate, raw_data.dateannounced) %>% subset(raw_data.detectedstate !="" & raw_data.currentstatus=="Hospitalized") %>% summarise(count=sum(as.integer(raw_data.numcases)))
state_wise_data <- rbind(state_wise_data, state_wise_data_2)
state_wise_data <- na.omit(state_wise_data)
top_4_state <- c("Maharashtra","Tamil Nadu", "Gujarat", "Delhi")
state_wise_data <- state_wise_data %>%
mutate(States=ifelse(raw_data.detectedstate %in% top_4_state, "MH,TN,GJ,DL","Others"))
state_wise_deceased_data <- data %>% subset(raw_data.currentstatus == "Deceased") %>% group_by(raw_data.detectedstate, raw_data.dateannounced) %>% summarise(Deceased=n())
state_wise_deceased_data_2 <- data2 %>% subset(raw_data.currentstatus == "Deceased") %>% group_by(raw_data.detectedstate, raw_data.dateannounced) %>% subset(raw_data.detectedstate !="") %>% summarise(Deceased=sum(as.integer(raw_data.numcases)))
state_wise_data_2 <- na.omit(state_wise_data_2)
state_wise_deceased_data <- rbind(state_wise_deceased_data, state_wise_deceased_data_2)
state_wise_deceased_data <- state_wise_deceased_data %>% arrange(as.Date(raw_data.dateannounced, "%d/%m/%Y")) %>% group_by(raw_data.detectedstate)
state_wise_deceased_data$Deceased <- lapply(state_wise_deceased_data$Deceased, function(x) { ifelse(is.na(x), 0, x) })
state_wise_deceased_data <- state_wise_deceased_data  %>% mutate(Cumulative.Deaths=cumsum(Deceased))
top_10_states_list <- as.list(state_wise_data[state_wise_data$raw_data.detectedstate != "" & state_wise_data$raw_data.dateannounced == format(Sys.Date()-1, "%d/%m/%Y") ,] %>% group_by(raw_data.detectedstate) %>% summarise(Cumulative.Sum=sum(count))   %>% arrange(desc(Cumulative.Sum)) %>% top_n(10) %>% select(raw_data.detectedstate))
state_wise_data <- state_wise_data %>% arrange(as.Date(raw_data.dateannounced, "%d/%m/%Y"))
state_wise_data <- state_wise_data %>% group_by(raw_data.detectedstate) %>% mutate(Cumulative.Sum=cumsum(count))
names(state_wise_data) <- c("State", "Date", "Count", "Cumulative.Sum")
state_wise_data <- na.omit(state_wise_data)
state_wise_data <- state_wise_data %>% group_by(State) %>% mutate(Rolling.Average=rollapply(Count,7,mean,align='right',fill=NA))
View(state_wise_data)
state_wise_data <- state_wise_data %>% group_by(State) %>% mutate(Rolling.Average=rollapply(Count,7,mean,align='right',fill=NA))
state_wise_data <- state_wise_data %>%
group_by(State) %>%
mutate(Rolling.Average=rollapply(Count,7,mean,align='right',fill=NA))
raw_data <- readLines("https://api.covid19india.org/raw_data1.json")
data <- as.data.frame(fromJSON(raw_data))
raw_data <- readLines("https://api.covid19india.org/raw_data2.json")
data <- rbind(data,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data3.json")
data2 <- as.data.frame(fromJSON(raw_data))
raw_data <- readLines("https://api.covid19india.org/raw_data4.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data5.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data6.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data7.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data8.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data9.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
state_wise_data <- data %>% group_by(raw_data.detectedstate, raw_data.dateannounced) %>% subset(raw_data.detectedstate !="") %>% summarise(count=n())
state_wise_data_2 <- data2 %>% group_by(raw_data.detectedstate, raw_data.dateannounced) %>% subset(raw_data.detectedstate !="" & raw_data.currentstatus=="Hospitalized") %>% summarise(count=sum(as.integer(raw_data.numcases)))
state_wise_data <- rbind(state_wise_data, state_wise_data_2)
state_wise_data <- na.omit(state_wise_data)
top_4_state <- c("Maharashtra","Tamil Nadu", "Gujarat", "Delhi")
state_wise_data <- state_wise_data %>%
mutate(Region=ifelse(raw_data.detectedstate %in% top_4_state, "MH,TN,GJ,DL","Others"))
top_10_states_list <- as.list(state_wise_data[state_wise_data$raw_data.detectedstate != "" & state_wise_data$raw_data.dateannounced == format(Sys.Date()-1, "%d/%m/%Y") ,] %>%
group_by(raw_data.detectedstate) %>%
summarise(Cumulative.Sum=sum(count))   %>%
arrange(desc(Cumulative.Sum)) %>%
top_n(10) %>%
select(raw_data.detectedstate))
top_10_states_list
raw_data <- readLines("https://api.covid19india.org/raw_data1.json")
data <- as.data.frame(fromJSON(raw_data))
raw_data <- readLines("https://api.covid19india.org/raw_data2.json")
data <- rbind(data,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data3.json")
data2 <- as.data.frame(fromJSON(raw_data))
raw_data <- readLines("https://api.covid19india.org/raw_data4.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data5.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data6.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data7.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data8.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
raw_data <- readLines("https://api.covid19india.org/raw_data9.json")
data2 <- rbind(data2,as.data.frame(fromJSON(raw_data)))
state_wise_data <- data %>%
group_by(raw_data.detectedstate, raw_data.dateannounced) %>%
subset(raw_data.detectedstate !="") %>%
summarise(count=n())
state_wise_data_2 <- data2 %>%
group_by(raw_data.detectedstate, raw_data.dateannounced) %>%
subset(raw_data.detectedstate !="" & raw_data.currentstatus=="Hospitalized") %>%
summarise(count=sum(as.integer(raw_data.numcases)))
state_wise_data_2 <- na.omit(state_wise_data_2)
state_wise_data <- rbind(state_wise_data, state_wise_data_2)
state_wise_data <- na.omit(state_wise_data)
top_4_state <- c("Maharashtra","Tamil Nadu", "Gujarat", "Delhi")
state_wise_data <- state_wise_data %>%
mutate(Region=ifelse(raw_data.detectedstate %in% top_4_state, "MH,TN,GJ,DL","Others"))
state_wise_deceased_data <- data %>%
subset(raw_data.currentstatus == "Deceased") %>%
group_by(raw_data.detectedstate, raw_data.dateannounced) %>%
summarise(Deceased=n())
state_wise_deceased_data_2 <- data2 %>%
subset(raw_data.currentstatus == "Deceased") %>%
group_by(raw_data.detectedstate, raw_data.dateannounced) %>%
subset(raw_data.detectedstate !="") %>%
summarise(Deceased=sum(as.integer(raw_data.numcases)))
state_wise_deceased_data <- rbind(state_wise_deceased_data, state_wise_deceased_data_2)
state_wise_deceased_data <- state_wise_deceased_data %>%
arrange(as.Date(raw_data.dateannounced, "%d/%m/%Y")) %>%
group_by(raw_data.detectedstate)
state_wise_deceased_data$Deceased <- lapply(state_wise_deceased_data$Deceased, function(x) { ifelse(is.na(x), 0, x) })
state_wise_deceased_data <- state_wise_deceased_data  %>%
mutate(Cumulative.Deaths=cumsum(Deceased))
top_10_states_list <- as.list(state_wise_data[state_wise_data$raw_data.detectedstate != "" & state_wise_data$raw_data.dateannounced == format(Sys.Date()-1, "%d/%m/%Y") ,] %>%
group_by(raw_data.detectedstate) %>%
summarise(Cumulative.Sum=sum(count))   %>%
arrange(desc(Cumulative.Sum)) %>%
top_n(10) %>%
select(raw_data.detectedstate))
state_wise_data <- state_wise_data %>%
arrange(as.Date(raw_data.dateannounced, "%d/%m/%Y"))
state_wise_data <- state_wise_data %>%
group_by(raw_data.detectedstate) %>%
mutate(Cumulative.Sum=cumsum(count))
names(state_wise_data) <- c("State", "Date", "Count", "Region", "Cumulative.Sum")
state_wise_data <- na.omit(state_wise_data)
state_wise_data <- state_wise_data %>%
group_by(State) %>%
mutate(Rolling.Average=rollapply(Count,7,mean,align='right',fill=NA))
top_10_states_data <- state_wise_data[state_wise_data$State %in% top_10_states_list$raw_data.detectedstate,]
top_10_states_data <- na.omit(top_10_states_data)
str(top_10_states_data)
top_10_states_data <- as.Date(top_10_states_data, "%d/%m/%Y")
top_10_states_data$Date <- as.Date(top_10_states_data$Date, "%d/%m/%Y")
str(state_wise_data)
state_wise_data$Date <- as.Date(state_wise_data$Date, "%d/%m/%Y")
top_10_states_data <- state_wise_data[state_wise_data$State %in% top_10_states_list$raw_data.detectedstate,]
str(top_10_states_data)
g <- ggplot(top_10_states_data, aes(x=Date,
y=Cumulative.Sum,
group=State )) +
geom_smooth(aes(color=State), size=1.5) +
scale_x_date() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("Date") +
ylab("Confirmed cases (Log scale)") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
ggsave("Most_affected_states.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
g <- ggplot(top_10_states_data, aes(x=Date,
y=Cumulative.Sum,
group=State )) +
geom_path(aes(color=State), size=1.5) +
scale_x_date() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("Date") +
ylab("Confirmed cases (Log scale)") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
ggsave("Most_affected_states.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
g <- ggplot(state_wise_data, aes(x=Date,
y=Cumulative.Sum,
group=State )) +
geom_path(aes(color=State), size=1.5) +
scale_x_date() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("Date") +
ylab("Confirmed cases (Log scale)") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
ggsave("All_states_log_graph.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
g <- ggplot(state_wise_data, aes(x=Date,
y=Cumulative.Sum,
group=State )) +
geom_path(aes(color=State), size=1.5) +
scale_x_date() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5),
legend.position = "bottom") +
xlab("Date") +
ylab("Confirmed cases (Log scale)") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
ggsave("All_states_log_graph.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
source('~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/most_affected_districs_2.R')
View(top_10_states_data)
g <- ggplot(top_10_states_data, aes(x=Date,
y=Cumulative.Sum,
group=State )) +
geom_path(aes(color=State), size=1.5) +
scale_x_date() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("Date") +
ylab("Confirmed cases (Log scale)") +
facet_wrap(~State, nrow = 4, scales = "free_y") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
ggsave("Most_affected_states.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5),
legend.position = "off") +
xlab("Date") +
facet_wrap(~State, nrow = 5, scales = "free_y") +
ylab("Confirmed cases (Log scale)") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
g <- ggplot(state_wise_data, aes(x=Date,
y=Cumulative.Sum,
group=State )) +
geom_path(aes(color=State), size=1.5) +
scale_x_date() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5),
legend.position = "off") +
xlab("Date") +
facet_wrap(~State, nrow = 5, scales = "free_y") +
ylab("Confirmed cases (Log scale)") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
ggsave("All_states_log_graph.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
g <- ggplot(top_10_states_data, aes(x=Date,
y=Cumulative.Sum,
group=State )) +
geom_path(aes(color=State), size=1.5) +
scale_x_date() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5),
legend.position = "off") +
xlab("Date") +
ylab("Confirmed cases (Log scale)") +
facet_wrap(~State, nrow = 4, scales = "free_y") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
ggsave("Most_affected_states.png", width = 10, height = 8, dpi = 150, units = "in",  device="png", path="~/Desktop")
g <- ggplot(state_wise_data, aes(x=Date,
y=Cumulative.Sum,
group=State )) +
geom_path(aes(color=State), size=1.5) +
scale_x_date() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5),
legend.position = "off") +
xlab("Date") +
facet_wrap(~State, nrow = 5, scales = "free_y") +
ylab("Confirmed cases (Log scale)") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
ggsave("All_states_log_graph.png", width = 18, height = 15, dpi = 150, units = "in",  device="png", path="~/Desktop")
g <- ggplot(state_wise_data, aes(x=Date,
y=Cumulative.Sum,
group=State )) +
geom_path(aes(color=State), size=1.5) +
scale_x_date() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5),
legend.position = "off") +
xlab("Date") +
facet_wrap(~State, nrow = 5, scales = "free_y") +
ylab("Confirmed cases (Log scale)") +
ggtitle("Most Affected States due to COVID-19") +
theme(text=element_text(family="Helvetica", size=14) , plot.title = element_text(hjust = 0.5))
ggbackground(g, "~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/old_paper.jpg")
ggsave("All_states_log_graph.png", width = 26, height = 15, dpi = 150, units = "in",  device="png", path="~/Desktop")
source('~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/most_affected_districs_2.R')
commit_msg <- paste("Adding data till", Sys.Date())
commit_cmd <- paste("git commit -m \"", commit_msg, "\"")
commit_cmd
source('~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/tamilnadu_deaths_dataset.R')
setwd("~/Documents/datasciencecourse/github_root/TamilNaduCovidData/TamilNadu")
commit_msg <- paste("Adding data till", Sys.Date())
commit_cmd <- paste("git commit -m \"", commit_msg, "\"")
system("git add .")
system(commit_cmd)
system("git push")
setwd("~/Documents/datasciencecourse/github_root/TamilNaduCovidData")
commit_msg <- paste("Adding data till", Sys.Date())
commit_cmd <- paste("git commit -m \"", commit_msg, "\"")
system("git add .")
system(commit_cmd)
system("git push")
source('~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/tamilnadu_deaths_analysis.R')
install.packages(c("dplyr", "forcats", "gganimate", "ggimage", "ggrepel", "zoo"))
install.packages(c("dplyr", "forcats", "gganimate", "ggimage", "ggrepel", "zoo"))
source('~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/top4_states_vs_others.R')
library(swirl)
swirl()
fit <- lm(child~parent, galton)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- sqrt(deviance(fit))
sRes <- deviance(fit)
1-(sRes/sTot)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$child)
cor(galton$parent, galton$child)^2
source('~/Documents/datasciencecourse/github_root/covid-2019-india-dataset/tests_as_share_of_population.R')
